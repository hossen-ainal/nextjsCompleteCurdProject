//  [ Server ] Error: Operation `invoices.find()` buffering timed out after 10000ms

// solve: ржЙржкрж░рж░рзЗ рзЗржЗрж░рж░ ржЯрж┐ ржжрзЗржЦрж╛рзЯ  рж╕рж╛рж░рзНржнрж╛рж░ рзЗржПрж░ рж╕рж╛ржерзЗ ржХрж╛ржирзЗржХрзНржЯ ржирж╛ ржерж╛ржХрж▓рзЗ ржЕржерзНржпрж╛? ржЯрзНрж░рж╛рзЗржЗ ржХрзНржпрж╛рж╢ ржмрзНрж▓ржХрзЗ рзЗржПржЗ  connectDB();
// ржХрж▓ ржХрж░рждрзЗ рж╣ржмрзЗред

// [ Server ] Error: Cannot read properties of null (reading 'map')

//  
// (3. Only plain objects can be passed to Client Components from Server Components. Objects with toJSON methods are not supported. Convert it manually to a simple value before passing it to props.
//   {_id: ..., amount: 4666, status: ..., customers: {buffer: ...}, createdAt: ..., updatedAt: ..., __v: ...}
// 3. no bhult shudhu matra Id er jono hocche)

ЁЯз╡ Step-by-Step: Mongoose ржжрж┐рзЯрзЗ ржХрж╛рж╕рзНржЯржорж╛рж░ ржЗржиржлрзЛ ржлрзЗржЪ (API ржЫрж╛рзЬрж╛)
тЬЕ Mongoose Query (Server Side Code):
ts
import mongoose from 'mongoose';
import { invoiceModel } from '@/models/invoice';

const getInvoiceCustomer = async () => {
  await mongoose.connect(process.env.MONGODB_URI); // ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзЛ ржПржЯрж╛ ржПржХржмрж╛рж░ржЗ рж░рж╛ржи рж╣рзЯ

  const invoiceId = '68411c1d416b05abba8f054c'; // ржПржЗржЯрж╛ рждрзБржорж┐ Dynamic ржнрж╛ржмрзЗ ржирж┐рждрзЗ ржкрж╛рж░рзЛ
  const invoice = await invoiceModel
    .findById(invoiceId)
    .populate('customers'); // EmployeeInfo рж░рзЗржлрж╛рж░рзЗржирзНрж╕

  if (!invoice) {
    console.log('Invoice not found');
    return;
  }

  const customerName = invoice.customers?.name;
  console.log('Customer Name:', customerName);
};
ЁЯУж Ensure EmployeeInfo Model is Connected:
ts
const employeeInfoSchema = new Schema({
  name: String,
  department: String,
  // ржЕржирзНржпрж╛ржирзНржп ржлрж┐рж▓рзНржб...
});

export const employeeModel =
  mongoose.models.EmployeeInfo ?? mongoose.model('EmployeeInfo', employeeInfoSchema);
ЁЯзк Test ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж╛ utility ржлрж╛ржЗрж▓ ржмрж╛ржирж╛рждрзЗ ржкрж╛рж░рзЛ:
ts
// utils/testCustomerFetch.ts
import { getInvoiceCustomer } from './getInvoiceCustomer';
getInvoiceCustomer();
тЪая╕П ржпрзЗржЯрж╛ ржорж╛ржерж╛рзЯ рж░рж╛ржЦрждрзЗ рж╣ржмрзЗ:
ржПржЗ ржХрзЛржб Server-side context ржП ржЪрж▓ржмрзЗ тАФ ржпрзЗржоржи Next.js ржПрж░ /app route ржмрж╛ getServerSideProps() ржПрж░ ржнрж┐рждрж░рзЗ

ржПржЯрж╛ API ржПрж░ ржмрж┐ржХрж▓рзНржк, ржХрж┐ржирзНрждрзБ ржХржЦржирзЛ UI ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ ржПржоржи Query ржХрж░рж╛ ржпрж╛рзЯ ржирж╛ unless рждрзБржорж┐ Server Components ржЗржЙржЬ ржХрж░рзЛ ржмрж╛ Node.js ржПрж░ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ рж░рж╛ржи ржХрж░рзЛ

рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ ржЖржорж┐ ржПржЯрж╛ getServerSideProps, app route, ржмрж╛ server actions ржПрж░ ржнрж┐рждрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ рж╕рзЗрж░рж╛ ржкржжрзНржзрждрж┐ржЯрж╛ржУ рж╕рж╛ржЬрж┐рзЯрзЗ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред ржХрзЛржиржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржЫрзЛ ржПржЦржи? ЁЯШК




 ## start error
// [ Server ] Error: Cannot read properties of undefined (reading 'count') рж╕ржорж╛ржзрж╛ржи ржХрж░рзБржи

// ЁЯЫая╕П ржПржЗ error messageтАФCannot read properties of undefined (reading 'count')тАФржмрзЛржЭрж╛рзЯ ржпрзЗ рждрзБржорж┐ undefined ржХрзЛржирзЛ object-ржПрж░ ржоржзрзНржпрзЗ ржерзЗржХрзЗ count property access ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржЫрзЛред ржЪрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржПржЯрж╛ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗ рж╕ржорж╛ржзрж╛ржирзЗ ржпрж╛ржЗ:

// ЁЯФН рж╕ржорж╕рзНржпрж╛ржЯрж┐ ржХрзА?
// ts
// console.log(data.count);
// ржПржЦрж╛ржирзЗ data ржпржжрж┐ undefined рж╣рзЯ, рждрж╛рж╣рж▓рзЗ JavaScript рж░рзЗржЧрзЗ ржпрж╛ржмрзЗ ЁЯШд ржХрж╛рж░ржг рждрзБржорж┐ ржПржоржи ржХрж┐ржЫрзБ ржерзЗржХрзЗ property ржирж┐рждрзЗ ржЪрж╛ржЪрзНржЫрзЛ ржпрзЗржЯрж╛ ржЕрж╕рзНрждрж┐рждрзНржмржЗ ржирзЗржЗред

// ЁЯза рж╕ржорзНржнрж╛ржмрзНржп ржХрж╛рж░ржгржЧрзБрж▓рзЛ:
// Database ржерзЗржХрзЗ fetch ржХрж░рж╛ object ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐

// ts
// const data = await Collection.findOne({ _id: someId });
// // ржпржжрж┐ ржХрж┐ржЫрзБ ржирж╛ ржорж┐рж▓рзЗ, data рж╣ржмрзЗ undefined
// API response structure ржнрзБрж▓

// ts
// const res = await fetch(...);
// const data = res.data; // ржХрж┐ржирзНрждрзБ рж╣рзЯрждрзЛ ржарж┐ржХржнрж╛ржмрзЗ JSON parse ржХрж░рзЛржирж┐
// Optional chaining ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛржирж┐

// ts
// console.log(data?.count); // ржПржЯрж╛ safe рж╣ржмрзЗ
// тЬЕ рж╕ржорж╛ржзрж╛ржи ржХрзМрж╢рж▓:
// 1. Check for undefined:
// ts
// if (data) {
//   console.log(data.count);
// } else {
//   console.error("Data is undefined!");
// }
// 2. Optional Chaining:
// ts
// console.log(data?.count); // ржпржжрж┐ data ржирж╛ ржерж╛ржХрзЗ, result рж╣ржмрзЗ undefined
// 3. Default Value ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ:
// ts
// console.log(data?.count ?? 0); // ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ 0 ржжрзЗржЦрж╛ржмрзЗ
// 4. Debugging Tip:
// Console рж▓ржЧ ржжрж┐рзЯрзЗ ржмрзБржЭрзЗ ржирж╛ржУ data ржЖрж╕рж▓рзЗржЗ ржЖржЫрзЗ ржХрж┐ ржирж╛:

// ts
// console.log("Data received:", data);
// ЁЯЪА Bonus: Next.js API ржмрж╛ MongoDB context-ржП
// рждрзБржорж┐ accounts app-ржП ржХрж╛ржЬ ржХрж░ржЫрзЛ ржмрж▓рзЗ ржзрж░ржЫрж┐, ржпрзЗржЦрж╛ржирзЗ count рж╣рждрзЗ ржкрж╛рж░рзЗ document рж╕ржВржЦрзНржпрж╛ ржмрж╛ child account рж╕ржВржЦрзНржпрж╛ред ржПржЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ:

// ts
// const doc = await Account.findOne({ code: "1001" });
// if (!doc) throw new Error("Account not found");
// console.log(doc.count);
// ЁЯУж ржЕржержмрж╛ ржпржжрж┐ count nested field рж╣рзЯ:

// ts
// console.log(doc?.meta?.count ?? 0);
// рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ рждрзЛржорж╛рж░ ржкрзНрж░ржХрзГржд ржХрзЛржб рж╕рзНржирж┐ржкрзЗржЯ ржжрж┐рж▓рзЗ ржЖржорж┐ pinpoint ржХрж░рзЗ ржмрж▓рждрзЗ ржкрж╛рж░рж┐ ржарж┐ржХ ржХрзЛржи рж▓рж╛ржЗржирзЗ issue рж╣ржЪрзНржЫрзЗред ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ ржХрж┐? ЁЯШК
## end error